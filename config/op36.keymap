#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        Lang_En {
            bindings = <&switch_to_en>;
            key-positions = <13 14>;
        };

        Lang_Ru {
            bindings = <&switch_to_ru>;
            key-positions = <15 16>;
        };

        en_comma {
            bindings = <&kp COMMA>;
            key-positions = <16 17>;
            layers = <0>;
        };

        en_semi {
            bindings = <&kp SEMI>;
            key-positions = <17 18>;
            layers = <0>;
        };

        en_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <18 19>;
            layers = <0>;
        };

        en_dot {
            bindings = <&kp LS(DOT)>;
            key-positions = <13 12>;
            layers = <0>;
        };

        en_colon {
            bindings = <&kp COLON>;
            key-positions = <12 11>;
            layers = <0>;
        };

        en_slash {
            bindings = <&kp SLASH>;
            key-positions = <10 11>;
        };

        en_single_quote {
            bindings = <&kp LS(SQT)>;
            key-positions = <3 4>;
            layers = <0>;
        };

        en_double_quote {
            bindings = <&kp DQT>;
            key-positions = <5 6>;
            layers = <0>;
        };

        en_excl {
            bindings = <&kp EXCL>;
            key-positions = <6 7>;
            layers = <0>;
        };

        en_quest {
            bindings = <&kp QMARK>;
            key-positions = <3 2>;
        };

        en_plus {
            bindings = <&kp PLUS>;
            key-positions = <2 1>;
            layers = <0>;
        };

        en_munus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        en_left_paren {
            bindings = <&kp LPAR>;
            key-positions = <3 1>;
            layers = <0>;
        };

        en_right_paren {
            bindings = <&kp RPAR>;
            key-positions = <4 1>;
            layers = <0>;
        };
    };

    macros {
        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&lang_en &macro_param_1to1 &kp MACRO_PLACEHOLDER &lang_ru>,
                <&macro_press>;

            label = "EN";
        };

        ru: ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&lang_ru &macro_param_1to1 &kp MACRO_PLACEHOLDER &lang_en>;
            label = "RU";
        };

        lang_en: lang_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(NUMBER_8))>, <&macro_wait_time 10>;

            label = "LANG_EN";
        };

        lang_ru: lang_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_9))>, <&macro_wait_time 10>;

            label = "LANG_RU";
        };

        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &lang_ru>;
            label = "SWITCH_TO_RU";
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &lang_en>;
            label = "SWITCH_TO_EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W        &kp E         &kp R          &kp T                                &kp Y        &kp U          &kp I         &kp O        &kp P
  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F   &kp G                                &kp H        &hmr RCTRL J   &hmr RSHFT K  &hmr LALT L  &hmr RGUI SEMICOLON
  &kp Z        &kp X        &kp C         &kp V          &kp B                                &kp N        &kp M          &kp COMMA     &kp DOT      &kp SQT
                                          &kp BACKSPACE  &lt 1 SPACE  &lt 2 TAB    &lt 1 ESC  &lt 2 ENTER  &kp BACKSPACE
            >;
        };

        nav {
            bindings = <
  &kp N6              &kp RU_N7               &kp N8               &kp N9               &kp N0                          &kp N6           &kp N7           &kp N8           &kp N9        &kp N0
  &hml LGUI NUMBER_1  &hml LEFT_ALT NUMBER_2  &hml LSHFT NUMBER_3  &hml LCTRL NUMBER_4  &kp NUMBER_5                    &kp PRINTSCREEN  &hmr RCTRL LEFT  &hmr RSHFT DOWN  &hmr LALT UP  &hmr RGUI RIGHT
  &none               &kp HOME                &kp INS              &kp END              &kp DELETE                      &kp CAPS         &none            &kp PG_DN        &kp PG_UP     &none
                                                                   &trans               &trans        &trans    &trans  &mo 3            &trans
            >;
        };

        sym {
            bindings = <
  &none           &kp LT          &kp EQUAL         &kp GT           &kp GRAVE                    &kp CARET  &kp LBKT         &kp UNDER        &kp RBKT        &none
  &hml LGUI BSLH  &hml LALT LPAR  &hml LSHFT MINUS  &hml LCTRL RPAR  &kp PLUS                     &kp PRCNT  &hmr RCTRL LBRC  &hmr RSHFT SEMI  &hmr LALT RBRC  &hmr RGUI EXCL
  &kp HASH        &kp STAR        &kp COLON         &kp FSLH         &none                        &none      &kp PIPE         &kp TILDE        &kp AMPS        &kp DLLR
                                                    &trans           &mo 3      &trans    &trans  &trans     &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &none        &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };

        ru {
            bindings = <
  &kp RU_CYRILLIC_SHORT_I   &kp RU_CYRILLIC_TSE         &kp RU_CYRILLIC_U          &kp RU_CYRILLIC_KA        &kp RU_CYRILLIC_IE                          &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA        &kp RU_CYRILLIC_SHCHA     &kp RU_CYRILLIC_ZE
  &hml LGUI RU_CYRILLIC_EF  &hml LALT RU_CYRILLIC_YERU  &hml LSHFT RU_CYRILLIC_VE  &hml LCTRL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                          &kp RU_CYRILLIC_ER  &hmr RCTRL RU_CYRILLIC_O   &hmr RSHFT RU_CYRILLIC_EL  &hmr LALT RU_CYRILLIC_DE  &hmr RGUI RU_CYRILLIC_ZHE
  &kp RU_CYRILLIC_YA        &kp RU_CYRILLIC_CHE         &kp RU_CYRILLIC_ES         &kp RU_CYRILLIC_EM        &kp RU_CYRILLIC_I                           &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE         &kp RU_CYRILLIC_YU        &kp RU_CYRILLIC_HA
                                                                                   &kp BACKSPACE             &lt 1 SPACE         &lt 2 TAB    &lt 1 ESC  &lt 2 ENTER         &kp BACKSPACE
            >;
        };
    };
};
