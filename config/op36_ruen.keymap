#include "keys_ru.h"
#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <13 14>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <15 16>;
        };

        en_commma {
            bindings = <&kp COMMA>;
            key-positions = <16 17>;
            layers = <0 2>;
        };

        en_dot {
            bindings = <&kp DOT>;
            key-positions = <13 12>;
            layers = <0 2>;
        };

        en_semicolon {
            bindings = <&kp SEMI>;
            key-positions = <17 18>;
            layers = <0 2>;
        };

        en_colon {
            bindings = <&kp COLON>;
            key-positions = <12 11>;
            layers = <0 2>;
        };

        ru_E {
            bindings = <&kp RU_CYRILLIC_E>;
            key-positions = <16 19>;
            layers = <1>;
        };

        en_bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <18 19>;
            layers = <0 2>;
        };

        en_fslash {
            bindings = <&kp FSLH>;
            key-positions = <10 11>;
            layers = <0 2>;
        };

        en_squote {
            bindings = <&kp SQT>;
            key-positions = <3 4>;
            layers = <0 2>;
        };

        en_dquote {
            bindings = <&kp DQT>;
            key-positions = <5 6>;
            layers = <0 2>;
        };

        en_plus {
            bindings = <&kp PLUS>;
            key-positions = <1 2>;
            layers = <0 2>;
        };

        en_minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
            layers = <0 2>;
        };

        en_excl {
            bindings = <&kp EXCL>;
            key-positions = <6 7>;
            layers = <0 2>;
        };

        en_quest {
            bindings = <&kp QMARK>;
            key-positions = <3 2>;
            layers = <0 2>;
        };

        en_at {
            bindings = <&kp LS(AT_SIGN)>;
            key-positions = <0 1>;
            layers = <0 2>;
        };

        en_hash {
            bindings = <&kp HASH>;
            key-positions = <8 9>;
            layers = <0 2>;
        };

        en_lpar {
            bindings = <&kp LPAR>;
            key-positions = <3 1>;
            layers = <0 2>;
        };

        en_rpar {
            bindings = <&kp RPAR>;
            key-positions = <4 1>;
            layers = <0 2>;
        };

        en_grave {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <6 8>;
            layers = <0 2>;
        };

        en_triple_grave {
            bindings = <&triple_grave>;
            key-positions = <6 7 8>;
            layers = <0 2>;
        };

        ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <22 24>;
        };

        ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <22 21>;
        };

        ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        en_lt {
            bindings = <&kp LS(LESS_THAN)>;
            key-positions = <26 27>;
            layers = <0 2>;
        };

        en_gt {
            bindings = <&kp LS(GREATER_THAN)>;
            key-positions = <27 28>;
            layers = <0 2>;
        };

        en_pipe {
            bindings = <&kp PIPE>;
            key-positions = <26 28>;
            layers = <0 2>;
        };

        ru_comma {
            bindings = <&kp RU_COMMA>;
            key-positions = <16 17>;
            layers = <1 3>;
        };

        ru_dot {
            bindings = <&kp RU_DOT>;
            key-positions = <13 12>;
            layers = <1 3>;
        };

        ru_semicolon {
            bindings = <&kp RU_SEMI>;
            key-positions = <17 18>;
            layers = <1 3>;
        };

        ru_colon {
            bindings = <&kp RU_COLON>;
            key-positions = <12 11>;
            layers = <1 3>;
        };

        ru_bslash {
            bindings = <&kp RU_BSLH>;
            key-positions = <18 19>;
            layers = <1 3>;
        };

        ru_fslash {
            bindings = <&kp RU_FSLH>;
            key-positions = <10 11>;
            layers = <1 3>;
        };

        ru_squote {
            bindings = <&en SQT>;
            key-positions = <3 4>;
            layers = <1 3>;
        };

        ru_dquote {
            bindings = <&kp RU_DQT>;
            key-positions = <5 6>;
            layers = <1 3>;
        };

        ru_plus {
            bindings = <&kp RU_PLUS>;
            key-positions = <1 2>;
            layers = <1 3>;
        };

        ru_minus {
            bindings = <&kp RU_MINUS>;
            key-positions = <7 8>;
            layers = <1 3>;
        };

        ru_excl {
            bindings = <&kp RU_EXCL>;
            key-positions = <6 7>;
            layers = <1 3>;
        };

        ru_quest {
            bindings = <&kp RU_QUESTION>;
            key-positions = <3 2>;
            layers = <1 3>;
        };

        ru_at {
            bindings = <&en AT_SIGN>;
            key-positions = <0 1>;
            layers = <1 3>;
        };

        ru_hash {
            bindings = <&en HASH>;
            key-positions = <8 9>;
            layers = <1 3>;
        };

        ru_lpar {
            bindings = <&kp RU_LPAR>;
            key-positions = <3 1>;
            layers = <1 3>;
        };

        ru_rpar {
            bindings = <&kp RU_RPAR>;
            key-positions = <4 1>;
            layers = <1 3>;
        };

        ru_grave {
            bindings = <&en GRAVE>;
            key-positions = <6 8>;
            layers = <1 3>;
        };

        ru_triple_grave {
            bindings = <&ru_triple_grave>;
            key-positions = <6 7 8>;
            layers = <1 3>;
        };

        ru_lt {
            bindings = <&en LESS_THAN>;
            key-positions = <26 27>;
            layers = <1 3>;
        };

        ru_gt {
            bindings = <&en LS(GREATER_THAN)>;
            key-positions = <27 28>;
            layers = <1 3>;
        };

        ru_pipe {
            bindings = <&en PIPE>;
            key-positions = <26 28>;
            layers = <1 3>;
        };

        enru_eq {
            bindings = <&kp EQUAL>;
            key-positions = <1 2 3>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(N9))>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_8))>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };

        triple_grave: triple_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_GRAVE";
        };

        ru_triple_grave: ru_triple_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to_en &kp GRAVE &kp GRAVE &kp GRAVE &to_ru>;
            label = "RU_TRIPLE_GRAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
  &kp Q        &kp W        &kp E         &kp R          &kp T                                  &kp Y        &kp U          &kp I         &kp O        &kp P
  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F   &kp G                                  &kp H        &hmr RCTRL J   &hmr RSHFT K  &hmr LALT L  &hmr RGUI SEMICOLON
  &kp Z        &kp X        &kp C         &kp V          &kp B                                  &kp N        &kp M          &kp COMMA     &kp DOT      &kp SQT
                                          &kp BACKSPACE  &lt 2 SPACE  &lt 4 TAB    &lt 2 ENTER  &lt 4 ENTER  &kp BACKSPACE
            >;
        };

        ru {
            bindings = <
  &kp RU_CYRILLIC_SHORT_I   &kp RU_CYRILLIC_TSE         &kp RU_CYRILLIC_U          &kp RU_CYRILLIC_KA        &kp RU_CYRILLIC_IE                          &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA        &kp RU_CYRILLIC_SHCHA     &kp RU_CYRILLIC_ZE
  &hml LGUI RU_CYRILLIC_EF  &hml LALT RU_CYRILLIC_YERU  &hml LSHFT RU_CYRILLIC_VE  &hml LCTRL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                          &kp RU_CYRILLIC_ER  &hmr RCTRL RU_CYRILLIC_O   &hmr RSHFT RU_CYRILLIC_EL  &hmr LALT RU_CYRILLIC_DE  &hmr RGUI RU_CYRILLIC_ZHE
  &kp RU_CYRILLIC_YA        &kp RU_CYRILLIC_CHE         &kp RU_CYRILLIC_ES         &kp RU_CYRILLIC_EM        &kp RU_CYRILLIC_I                           &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE         &kp RU_CYRILLIC_YU        &kp RU_CYRILLIC_HA
                                                                                   &kp BACKSPACE             &lt 3 SPACE         &lt 4 TAB    &lt 3 ESC  &lt 4 ENTER         &kp BACKSPACE
            >;
        };

        sym_en {
            bindings = <
  &kp NUMBER_6        &kp NUMBER_7        &kp NUMBER_8         &kp NUMBER_9         &kp NUMBER_0                    &kp CARET  &kp LS(LEFT_BRACE)       &kp UNDER         &kp LS(RIGHT_BRACE)      &kp DLLR
  &hml LGUI NUMBER_1  &hml LALT NUMBER_2  &hml LSHFT NUMBER_3  &hml LCTRL NUMBER_4  &kp NUMBER_5                    &kp PRCNT  &hmr RCTRL LEFT_BRACKET  &hmr RSHFT MINUS  &hmr LALT RIGHT_BRACKET  &hmr RGUI EXCL
  &kp HASH            &kp STAR            &kp MINUS            &kp FSLH             &kp DELETE                      &kp AMPS   &kp PIPE                 &kp COMMA         &kp DOT                  &kp QMARK
                                                               &trans               &mo 5         &trans    &trans  &none      &trans
            >;
        };

        sym_ru {
            bindings = <
  &en NUMBER_6        &en NUMBER_7        &kp NUMBER_8         &en NUMBER_9         &en NUMBER_0                    &en CARET      &en LS(LEFT_BRACE)  &kp UNDER         &en LS(RIGHT_BRACE)  &en DLLR
  &hml LGUI NUMBER_1  &hml LALT NUMBER_2  &hml LSHFT NUMBER_3  &hml LCTRL NUMBER_4  &kp NUMBER_5                    &kp PRCNT      &en LEFT_BRACKET    &hmr RSHFT MINUS  &en RIGHT_BRACKET    &hmr RGUI EXCL
  &en HASH            &kp STAR            &kp RU_MINUS         &kp RU_FSLH          &en DEL                         &en AMPERSAND  &en LESS_THAN       &en PIPE          &en GREATER_THAN     &kp RU_QMARK
                                                               &trans               &mo 5         &trans    &trans  &none          &trans
            >;
        };

        nav {
            bindings = <
  &kp F6        &kp F7     &kp F8     &kp F9   &kp F10                    &kp N6           &kp N7           &kp N8           &kp PAGE_UP    &kp PRINTSCREEN
  &hml LGUI F1  &kp F2     &kp F3     &kp F4   &kp F5                     &kp PRINTSCREEN  &hmr RCTRL LEFT  &hmr RSHFT DOWN  &hmr LALT UP   &hmr RGUI RIGHT
  &layer_en     &kp LG(R)  &kp LG(E)  &kp F11  &kp F12                    &kp CAPS         &none            &kp PG_DN        &kp PAGE_DOWN  &layer_ru
                                      &trans   &none    &trans    &trans  &mo 5            &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &none        &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
